Чтобы при нажатии определенной клавиши картинка возвращалась в исходное положение, вам нужно реализовать функцию, которая будет сбрасывать параметры камеры и объектов в их начальные значения, то есть те, которые были при загрузке сцены из файла .rt. Вы можете сохранить начальное состояние в структуре и восстанавливать его, когда пользователь нажимает нужную клавишу.

Вот как можно реализовать такую функцию:
1. Создайте структуру для хранения начальных значений

Для начала вам нужно хранить начальные значения камеры и объектов. Можно это сделать в структуре t_rt или создать дополнительную структуру, например t_scene, которая будет хранить начальные значения, и затем восстанавливать их.
2. Добавьте в структуру t_rt указатель на начальное состояние

В структуре t_rt добавьте указатель или копию исходных данных, например, для камеры и объектов:

typedef struct s_rt
{
    t_camera       camera;          // Текущая камера
    t_camera       initial_camera;  // Начальное состояние камеры
    t_obj *objects;                 // Массив объектов
    t_obj *initial_objects;         // Начальные объекты
    // Другие поля
} t_rt;

3. Сохраните начальные значения при загрузке сцены

После того как сцена загружена (например, в функции open_file), вы можете сохранить начальные значения камеры и объектов:

void save_initial_state(t_rt *rt)
{
    // Копируем текущие значения камеры в initial_camera
    rt->initial_camera = rt->camera;
    
    // Если объекты в heap, то нужно создать копию
    rt->initial_objects = copy_objects(rt->objects);  // Функция копирования объектов
}

4. Реализуйте функцию для сброса состояния

Когда пользователь нажимает клавишу, например R_KEY, вы можете сбросить все объекты и камеру в исходное положение:

void reset_scene(t_rt *rt)
{
    rt->camera = rt->initial_camera;  // Восстанавливаем начальное положение камеры
    copy_objects_back(rt->objects, rt->initial_objects);  // Восстанавливаем начальные объекты
    render(rt);  // Перерисовываем сцену
}

Вам нужно будет реализовать функцию для копирования объектов (если они хранятся в динамической памяти), чтобы при сбросе объектов их состояния возвращались в изначальное.

t_obj *copy_objects(t_obj *objects)
{
    t_obj *copy;
    
    // Реализуйте логику копирования объектов (например, через malloc)
    // Пример для одного объекта:
    copy = malloc(sizeof(t_obj));
    copy->pos = objects->pos;
    copy->orient = objects->orient;
    // Копируем другие параметры объекта

    return copy;
}

void copy_objects_back(t_obj *objects, t_obj *initial_objects)
{
    // Копируем начальные объекты обратно в текущие
    *objects = *initial_objects;
}

5. Обработчик клавиши для сброса состояния

В обработчике клавиш (keypress) добавьте условие для сброса состояния при нажатии клавиши:

int keypress
    if (key == ESC_KEY)
        exit_win(rt);

    if (key == R_KEY)  // Например, если нажата клавиша R
    {
        reset_scene(rt);  // Восстанавливаем исходное положение
    }
    
    // Другие клавиши...
    return 0;
}

6. Завершение

Теперь, при нажатии на клавишу R_KEY, ваша сцена будет сбрасываться в исходное состояние, то есть камера и объекты вернутся в положение, которое было при первоначальной загрузке сцены.
Итоговый пример:

void save_initial_state(t_rt *rt)
{
    // Сохраняем начальные данные
    rt->initial_camera = rt->camera;
    rt->initial_objects = copy_objects(rt->objects);
}

void reset_scene(t_rt *rt)
{
    // Восстанавливаем начальные значения
    rt->camera = rt->initial_camera;
    copy_objects_back(rt->objects, rt->initial_objects);
    render(rt);  // Перерисовываем сцену
}

int keypress(int key, t_rt *rt)
{
    if (key == ESC_KEY)
        exit_win(rt);

    if (key == R_KEY)  // Например, если нажата клавиша R
    {
        reset_scene(rt);  // Восстанавливаем исходное положение
    }
    
    // Другие клавиши...
    return 0;
}

Этот код гарантирует, что при нажатии на клавишу R_KEY ваша сцена вернется в исходное состояние, включая положение камеры и объектов.